# for frontend


version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 16
  pre_build:
    commands:
      # 登录 ECR
      - aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 034362066948.dkr.ecr.ap-northeast-1.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      # 建立依赖库
      - npm install
      - echo npm install completed on `date`
      # 编译
      - npm run build
      - echo npm run build completed on `date`
      # 获取时间格式的标签
      - TAG=$(date "+%Y%m%d%H%M%S")
      # build 镜像
      - docker build -t 034362066948.dkr.ecr.ap-northeast-1.amazonaws.com/ecr2-1029:$TAG ./
      - echo docker build completed on `date`
      # 推送镜像
      - docker push 034362066948.dkr.ecr.ap-northeast-1.amazonaws.com/ecr2-1029:$TAG
      - echo docker push completed on `date`
  post_build:
    commands:
      - echo Build completed on `date`
      # 創建一個在源碼根目錄名為imagedefinitions.json的文件
      # 包含ECS Service的容器名，以及更新後要使用的image URI
      # Codepipeline的部屬階段將使用此信息來創建ECS Service引用的task定義的新版本，然後他會使用新的TASK定義更新ECS Service
      # %s會被替換成後面的部分
      # name 指定要更新的container的名字，imageUri指定更新後的鏡像Uri
      - printf '[{"name":"mynginx","imageUri":"%s"}]' 034362066948.dkr.ecr.ap-northeast-1.amazonaws.com/ecr2-1029:$TAG > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    # - dist/shop/*
    # - dist/shop/assets/*
    # - appspec.yml